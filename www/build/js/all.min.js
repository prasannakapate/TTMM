!function(){"use strict";angular.module("ttmmApp",["ionic","ttmmApp.core","ttmmApp.expense","ttmmApp.account","ttmmApp.common"]).run(function($ionicPlatform,CacheFactory){$ionicPlatform.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&StatusBar.styleDefault(),CacheFactory("getExpenseListCache",{storageMode:"localStorage",maxAge:1e5,deleteOnExpire:"aggressive"}),CacheFactory("sessionCache",{storageMode:"localStorage",maxAge:1e5,deleteOnExpire:"aggressive"}),CacheFactory("staticCache",{storageMode:"localStorage"})})}).config(function($stateProvider,$urlRouterProvider,$ionicConfigProvider){$ionicConfigProvider.views.transition("ios"),$ionicConfigProvider.views.forwardCache(!1),$ionicConfigProvider.navBar.alignTitle("center"),$ionicConfigProvider.tabs.position("bottom").style("standard"),$stateProvider.state("welcome",{url:"/app/welcome",templateUrl:"app/welcome/welcome.html"}).state("login",{url:"/app/login",templateUrl:"app/login/login.html"}).state("tab",{url:"/tab","abstract":!0,templateUrl:"app/layout/tabs.html"}).state("tab.makeExpense",{url:"/app/makeExpense",views:{"tab-makeExpense":{templateUrl:"app/expense/make-expense/make-expense.html"}}}).state("tab.expenses",{url:"/app/expenses",views:{"tab-expenses":{templateUrl:"app/expense/expense-list/expense-list.html"}}}).state("tab.account",{url:"/app/account",views:{"tab-account":{templateUrl:"app/account/account.html"}}}).state("expense-details",{url:"/app/expenses/expense-details/:id",templateUrl:"app/expense/expense-details/expense-details.html"}).state("newSignUp",{url:"/app/newSignUp",templateUrl:"app/sign-up/sign-up.html"}).state("forgotPassword",{url:"/app/forgotPassword",templateUrl:"app/forgot-password/forgot-password.html"}).state("contactUs",{url:"/app/contactUs",templateUrl:"app/contact-us/contact-us.html"}),$urlRouterProvider.otherwise("/app/welcome")})}(),function(){"use strict";angular.module("ttmmApp.account",[])}(),function(){"use strict";angular.module("ttmmApp.common",[])}(),function(){"use strict";angular.module("ttmmApp.core",["ionic-datepicker","ngSanitize","ngCookies","ngCordova","ngMessages","angular-cache","firebase"])}(),function(){"use strict";angular.module("ttmmApp.expense",[])}(),function(){"use strict";function Auth($log,firebaseAuthService){$log.info("Assigning Auth");var auth=firebaseAuthService;return auth}angular.module("ttmmApp.common").factory("Auth",Auth),Auth.$inject=["$log","firebaseAuthService"]}(),function(){"use strict";function firebaseAuthService($firebaseAuth,$window,$q,$log,$cordovaFacebook,$ionicPopup,commonService){function createUser(credentials){var deferred=$q.defer();return fAuth.$createUser({email:credentials.email,password:credentials.password}).then(function(authData){return commonService.firebaseRef.child("users").child(authData.uid).set({email:credentials.email,username:credentials.username,country:credentials.country,mobileNo:credentials.mobileNo}),fAuth.$authWithPassword({email:credentials.email,password:credentials.password,country:credentials.country,mobileNo:credentials.mobileNo})}).then(function(authData){var userObj=authData[authData.provider];userObj&&(user.displayName=userObj.displayName||credentials.username||userObj.email,user.email=userObj.email),deferred.resolve(user)})["catch"](function(error){deferred.reject(error)}),deferred.promise}function nativeFacebookLogin(deferred){$cordovaFacebook.login(["public_profile","email"]).then(function(success){$log.debug("Native SignIn",success);var expirationDate=new Date;expirationDate.setSeconds(expirationDate.getSeconds()+success.authResponse.expiresIn),expirationDate=expirationDate.toISOString();var facebookAuthData={id:success.authResponse.userID,access_token:success.authResponse.accessToken,expirationDate:expirationDate};return facebookAuthData}).then(function(facebookAuthData){return fAuth.$authWithOAuthToken("facebook",facebookAuthData.access_token)}).then(function(authData){console.log("Logged In",2e3,"center"),$log.debug("Firebase Facebook Login ",authData);var userObj=authData[authData.provider];user.displayName=userObj.displayName||userObj.email,user.email=userObj.email,deferred.resolve(user)})["catch"](function(error){deferred.reject(error)})}function oauthBrowserSignIn(provider){var deferred=$q.defer();return fAuth.$authWithOAuthPopup(provider).then(function(authData){console.log("Logged In",2e3,"center");var userObj=authData[authData.provider];user.displayName=userObj.displayName||userObj.email,user.email=userObj.email,deferred.resolve(user)})["catch"](function(error){deferred.reject(error)}),deferred.promise}function oauthNativeSignIn(provider){var deferred=$q.defer(),providerHandler=nativeProviderHandler[provider];return providerHandler?providerHandler(deferred):oauthBrowserSignIn(provider).then(function(user){deferred.resolve(user)})["catch"](function(error){deferred.reject(error)}),deferred.promise}function oauthSignIn(provider){return $window.cordova?oauthNativeSignIn(provider):oauthBrowserSignIn(provider)}function signIn(credentials){var deferred=$q.defer();return fAuth.$authWithPassword({email:credentials.email,password:credentials.password}).then(function(authData){console.log("Logged In",2e3,"center");var userObj=authData[authData.provider];commonService.firebaseRef.child("users").child(authData.uid).once("value",function(snapshot){var val=snapshot.val();user.username=val,user.displayName=val}),user.displayName=userObj.displayName||userObj.email,user.email=userObj.email,deferred.resolve(user)})["catch"](function(error){deferred.reject(error)}),deferred.promise}function forgot(credentials){var deferred=$q.defer();return fAuth.$resetPassword({email:credentials.email}).then(function(){$ionicPopup.alert({title:"Success !",template:"Email sent to your registerd email id .",okType:"button-royal"}),$log.debug("Password reset email sent successfully!"),deferred.resolve("Password reset email sent successfully!")})["catch"](function(error){deferred.reject(error)}),deferred.promise}function isLoggedIn(){var currentUser=fAuth.$getAuth(),isUser=currentUser?!0:!1;if(isUser){var userObj=currentUser[currentUser.provider];user.displayName=userObj.displayName||userObj.email,user.email=userObj.email}return isUser}function signOut(){fAuth.$unauth()}function changePassword(credentials){var deferred=$q.defer();return fAuth.$changePassword(credentials).then(function(){$log.debug("Password changed successfully!"),deferred.resolve("Password changed successfully")})["catch"](function(error){console.error("Error: ",error),deferred.reject(error)}),deferred.promise}var user={displayName:"",email:"",mobileNo:""},nativeProviderHandler={facebook:nativeFacebookLogin},fAuth=$firebaseAuth(commonService.firebaseRef),service={createUser:createUser,signIn:signIn,oauthSignIn:oauthSignIn,signOut:signOut,forgot:forgot,user:user,isLoggedIn:isLoggedIn,changePassword:changePassword};return service}angular.module("ttmmApp.common").factory("firebaseAuthService",firebaseAuthService),firebaseAuthService.$inject=["$firebaseAuth","$window","$q","$log","$cordovaFacebook","$ionicPopup","commonService"]}(),function(){"use strict";function commonService(){function getKey(){var key={appid:"mF8l9ob91ObHNIgzfX8tnzD8WKcRJGyUkYxm45o4",restid:"l8qZLpxhTxZWZYmfJZJu3r5fvwcJcHGYTe7w6igT",jsid:"2Y3L2LtIUbPZCPpq31I3w963eo0at8HI8NnVILRU"};return key}var firebaseRef=new Firebase("https://ttmm.firebaseio.com"),baseUrl="https://ttmm.firebaseio.com/",service={baseUrl:baseUrl,firebaseRef:firebaseRef,getKey:getKey};return service}angular.module("ttmmApp.common").factory("commonService",commonService),commonService.$inject=[]}(),function(){"use strict";function expenseDataApi($http,$q,$ionicLoading,$timeout,$firebaseAuth,CacheFactory,commonService){function getExpenseList(forceRefresh){"undefined"==typeof forceRefresh&&(forceRefresh=!1);var deffered=$q.defer(),cacheKey="expenses",expenseListData=null;return forceRefresh||(expenseListData=self.getExpenseListCache.get(cacheKey)),expenseListData?deffered.resolve(expenseListData):($ionicLoading.show({template:'<div class="ion-loading-c"></div> Loading...'}),$http.get(baseUrl+"expenses.json",{}).success(function(response){$timeout(function(){self.getExpenseListCache.put(cacheKey,response),$ionicLoading.hide(),deffered.resolve(response),console.log("Received getExpenseList Data via HTTP",response)},2e3)}).error(function(error,status){$timeout(function(){console.log("Error While making HTTP Call"),$ionicLoading.hide(),deffered.reject(error,status)},2e3)})),deffered.promise}function makeExpense(expenseData){var deffered=$q.defer();return $http.post(baseUrl+"expenses.json",expenseData,{headers:{"Content-Type":"application/json"}}).success(function(response){deffered.resolve(response),console.log("make new expense success")}).error(function(error,status){deffered.reject(error,status),console.log("make new expense Error",error," Status =",status)}),deffered.promise}function removeExpense(id){var deffered=$q.defer();return $http["delete"]("https://api.parse.com/1/classes/Expenses/"+id,{headers:{"X-Parse-Application-Id":key.appid,"X-Parse-REST-API-Key":key.restid}}).success(function(response){console.log("Data delete successfully"),deffered.resolve(response)}).error(function(error,status){console.log("Data delete error"),deffered.reject(error,status)}),deffered.promise}function editExpense(id){var deffered=$q.defer();return $http.put("https://api.parse.com/1/classes/Expenses/"+id,{headers:{"X-Parse-Application-Id":key.appid,"X-Parse-REST-API-Key":key.restid},data:{userId:{__type:"Pointer",className:"_User",objectId:id}}}).success(function(response){console.log("Data edit successfully"),deffered.resolve(response)}).error(function(error,status){console.log("Data edit error"),deffered.reject(error,status)}),deffered.promise}var vm=this,self=vm;vm.currentUser="";var key=commonService.getKey(),baseUrl=commonService.baseUrl;commonService.firebaseRef;self.getExpenseListCache=CacheFactory.get("getExpenseListCache"),self.getExpenseListCache.setOptions({onExpire:function(key,value){getExpenseList().then(function(){console.log("getExpenseListCache was automatically refreshed",new Date)},function(){console.log("Error getting data. Putting expired item back to cache",new Date),self.getExpenseListCache.put(key,value)})},cacheFlushInterval:55e3,maxAge:36e5,verifyIntegrity:!0});var service={getExpenseList:getExpenseList,makeExpense:makeExpense,removeExpense:removeExpense,editExpense:editExpense};return service}angular.module("ttmmApp").factory("expenseDataApi",expenseDataApi),expenseDataApi.$inject=["$http","$q","$ionicLoading","$timeout","$firebaseAuth","CacheFactory","commonService"]}(),function(){"use strict";function sessionService($log,$q,$http,CacheFactory,commonService){function getUserSession(){var deffered=$q.defer(),cacheKey="sessions",sessiontData=null;return currentUser||(sessiontData=self.sessionCache.get(cacheKey)),sessiontData?void deffered.resolve(sessiontData):($http.get("https://api.parse.com/1/users/me",{headers:{"X-Parse-Application-Id":key.appid,"X-Parse-REST-API-Key":key.restid,"X-Parse-Session-Token":currentUser.sessionToken}}).success(function(response){self.sessionCache.put(cacheKey,response),console.log("Current users details",response),deffered.resolve(response)}).error(function(error,status){console.log("error getting current users details",error,status),deffered.reject(error,status)}),deffered.promise)}var key=commonService.getKey(),currentUser="",service={getUserSession:getUserSession};return service}angular.module("ttmmApp").factory("sessionService",sessionService),sessionService.$inject=["$log","$q","$http","CacheFactory","commonService"]}(),function(){"use strict";function userLoginDataApi($http,$q,$ionicLoading,$timeout,$ionicPopup,commonService,CacheFactory){function logout(){Parse.User.logOut()}function login(){}function currentUser(){}function getCurrentUser(){var deffered=$q.defer(),cacheKey="session";return vm.userData||(vm.sessionData=self.sessionCache.get(cacheKey)),vm.sessionData?(console.log("Found data inside the cache",vm.sessionData),deffered.resolve(vm.sessionData)):$http.get("https://api.parse.com/1/users/me",{headers:{"X-Parse-Application-Id":key.appid,"X-Parse-REST-API-Key":key.restid,"X-Parse-Session-Token":vm.userData.sessionToken||vm.sessionData.sessionToken}}).success(function(response){console.log("Current users details using http",response),self.sessionCache.put(cacheKey,response),deffered.resolve(response)}).error(function(error,status){console.log("error getting current users details",error,status),deffered.reject(error,status)}),deffered.promise}function logoutUser(currentUserId){var deffered=$q.defer();return $http.post("https://api.parse.com/1/logout","",{headers:{"X-Parse-Application-Id":key.appid,"X-Parse-REST-API-Key":key.restid,"X-Parse-Session-Token":vm.userData.sessionToken||vm.sessionData.sessionToken}}).success(function(response){console.log("Current users Successfully logout",response),deffered.resolve(response)}).error(function(error,status){console.log("error while logging out for currentUser",error,status),deffered.reject(error,status)}),deffered.promise}function loginUser(username,password){var deffered=$q.defer(),data={username:username,password:password};return $ionicLoading.show({template:'<div class="ion-loading-c"></div> Loading...'}),$http.get("https://api.parse.com/1/login",{headers:{"X-Parse-Application-Id":key.appid,"X-Parse-REST-API-Key":key.restid,"Content-Type":"application/x-www-form-urlencoded"},params:data}).success(function(response){$timeout(function(){$ionicLoading.hide(),deffered.resolve(response),vm.userData=response,console.log("user session token ->>>>>>>>>>>>",vm.userData.sessionToken)},2e3)}).error(function(error,status){$timeout(function(){console.log("Error While making HTTP Call"),$ionicLoading.hide(),deffered.reject(error,status),$ionicPopup.alert({title:"Try again !",template:"Incorrect username or password",okType:"button-assertive"})},2e3)}),deffered.promise}var key=commonService.getKey(),vm=this,self=vm;vm.sessionData="",vm.userData="",self.sessionCache=CacheFactory.get("sessionCache"),self.sessionCache.setOptions({onExpire:function(key,value){getCurrentUser().then(function(){console.log("sessionCache was automatically refreshed",new Date)},function(){console.log("Error getting sessionCache. Putting expired item back to cache",new Date)})},cacheFlushInterval:55e3,maxAge:36e5,verifyIntegrity:!0});var LoginServices={loginUser:loginUser,logoutUser:logoutUser,getCurrentUser:getCurrentUser,login:login,logout:logout,currentUser:currentUser};return LoginServices}angular.module("ttmmApp").factory("userLoginDataApi",userLoginDataApi),userLoginDataApi.$inject=["$http","$q","$ionicLoading","$timeout","$ionicPopup","commonService","CacheFactory"]}(),function(){"use strict";function signUpDataApi($http,$q,$ionicLoading,$timeout,commonService){function newUserSignUp(newUserSignUpData){var deffered=$q.defer();return $ionicLoading.show({template:'<div class="ion-loading-c"></div> Loading...'}),$http.post("https://api.parse.com/1/users",newUserSignUpData,{headers:{"X-Parse-Application-Id":key.appid,"X-Parse-REST-API-Key":key.restid}}).success(function(response){$timeout(function(){$ionicLoading.hide(),deffered.resolve(response),console.log("signUpUserData completed successfully",response)},2e3)}).error(function(error,status){$timeout(function(){$ionicLoading.hide(),deffered.reject(error,status),console.log(JSON.stringify(error,status))},2e3)}),deffered.promise}var key=commonService.getKey(),service={newUserSignUp:newUserSignUp};return service}angular.module("ttmmApp").factory("signUpDataApi",signUpDataApi),signUpDataApi.$inject=["$http","$q","$ionicLoading","$timeout","commonService"]}(),function(){"use strict";function AccountCtrl($state,firebaseAuthService,Auth){function activate(){vm.currentUser=firebaseAuthService.isLoggedIn(),console.log("Current User",vm.currentUser),vm.user=Auth.user}function currentUserLogout(){firebaseAuthService.signOut(),$state.go("welcome")}var vm=this;vm.currentUser="",vm.user="",vm.currentUserLogout=currentUserLogout,activate()}angular.module("ttmmApp.account").controller("AccountCtrl",AccountCtrl),AccountCtrl.$inject=["$state","firebaseAuthService","Auth"]}(),function(){"use strict";function forgotPasswordCtrl($log,firebaseAuthService){function forgot(credentials){firebaseAuthService.forgot(credentials).then(function(){vm.userData="",$log.debug("Password Reset Email sent"),console.log("Reset Password Email Sent",2e3,"center")})["catch"](function(error){$log.debug("Error in reseting password",error),console.log(error)})}var vm=this;vm.userData="",vm.forgot=forgot}angular.module("ttmmApp").controller("forgotPasswordCtrl",forgotPasswordCtrl),forgotPasswordCtrl.$inject=["$log","firebaseAuthService"]}(),function(){"use strict";function LoginCtrl($state,$cookieStore,sessionService,$ionicLoading,$ionicHistory,$log,firebaseAuthService){function userLogin(credentials){credentials&&credentials.email&&credentials.password?($ionicLoading.show({template:"Signing In..."}),firebaseAuthService.signIn(credentials).then(function(user){$log.debug("Logged in as:"+user),$ionicLoading.hide(),console.log("Logged In"),$ionicHistory.nextViewOptions({historyRoot:!0,disableBack:!0}),$state.go("tab.makeExpense")})["catch"](function(error){$log.debug(error),$ionicLoading.hide(),console.log(error)})):console.log("Please enter credentials")}var vm=this;vm.userData={},vm.currentUserId="",vm.userLogin=userLogin}angular.module("ttmmApp").controller("LoginCtrl",LoginCtrl),LoginCtrl.$inject=["$state","$cookieStore","sessionService","$ionicLoading","$ionicHistory","$log","firebaseAuthService"]}(),function(){"use strict";function SignUpCtrl($state,signUpDataApi,$ionicLoading,$ionicHistory,$log,firebaseAuthService){function userSignUp(credentials){console.log(credentials),$log.debug("Create credentials Function called"),credentials?($ionicLoading.show({template:"Signing Up..."}),firebaseAuthService.createUser(credentials).then(function(user){$log.debug("Created User as:",user),$ionicLoading.hide(),console.log("Logged In"),$ionicHistory.nextViewOptions({historyRoot:!0,disableBack:!0}),$state.go("login")})["catch"](function(error){$log.debug(error),console.log(error),$ionicLoading.hide()})):console.log("Please Enter Credentials")}var vm=this;vm.userSignUp=userSignUp,vm.userData={}}angular.module("ttmmApp").controller("SignUpCtrl",SignUpCtrl),SignUpCtrl.$inject=["$state","signUpDataApi","$ionicLoading","$ionicHistory","$log","firebaseAuthService"]}(),function(){"use strict";function WelcomeCtrl($state){}angular.module("ttmmApp").controller("WelcomeCtrl",WelcomeCtrl),WelcomeCtrl.$inject=["$state"]}(),function(){"use strict";function ExpenseListCtrl($scope,$filter,expenseDataApi){function loadList(forceRefresh){expenseDataApi.getExpenseList(forceRefresh).then(function(data){vm.expenseGroupByMonth=_(data).chain().groupBy(function(item){return item.expenseMonth=$filter("date")(item.expenseMonth,"MMM-yyyy"),item.expenseMonth}).pairs().map(function(currentItem){return _.object(_.zip(["month","expenseDetails"],currentItem))}).value()})["finally"](function(){$scope.$broadcast("scroll.refreshComplete")})}var vm=this;vm.title="My Expenses",vm.expenseGroupByMonth="",vm.loadList=loadList,vm.loadList(!1)}angular.module("ttmmApp.expense").controller("ExpenseListCtrl",ExpenseListCtrl),ExpenseListCtrl.$inject=["$scope","$filter","expenseDataApi"]}(),function(){"use strict";function ExpenseDetailsCtrl($scope,$stateParams,$filter,expenseDataApi){$scope.expenseMonth=$stateParams.id,$scope.expenseDetails="",$scope.totalMonthlySum="",$scope.loadList="",$scope.loadList=function(forceRefresh){expenseDataApi.getExpenseList(forceRefresh).then(function(data){$scope.expenseDetails=_(data).chain().groupBy(function(item){return item.expenseMonth=$filter("date")(item.expenseMonth,"MMM-yyyy"),item.expenseMonth.substring(0,8)}).pairs().map(function(currentItem){return _.object(_.zip(["month","expenses"],currentItem))}).find({month:$scope.expenseMonth}).pick("expenses").value(),$scope.totalMonthlySum=_($scope.expenseDetails.expenses).chain().sum("expenseAmount").value()})},$scope.loadList(!1)}angular.module("ttmmApp.expense").controller("ExpenseDetailsCtrl",ExpenseDetailsCtrl),ExpenseDetailsCtrl.$inject=["$scope","$stateParams","$filter","expenseDataApi"]}(),function(){"use strict";function MakeExpenseCtrl($scope,$state,expenseDataApi){function datePickerCallback(val){"undefined"==typeof val?console.log("No date selected"):($scope.datepickerObjectPopup.inputDate=val,$scope.expense.expenseMonth=val)}function makeExpense(expense){$scope.loadList=function(forceRefresh){expenseDataApi.makeExpense(expense).then(function(data){expenseDataApi.getExpenseList(forceRefresh).then(function(data){$state.go("tab.expenses")})})},$scope.loadList(!1),$scope.expense=""}$scope.loadList="",$scope.currentUser="",$scope.makeExpense=makeExpense,$scope.expense={},$scope.datepickerObject={},$scope.expenseMonth="",$scope.userId="",$scope.datepickerObject.inputDate=new Date,$scope.datepickerObjectPopup={titleLabel:"Select Expense Date",todayLabel:"Today",closeLabel:"Close",setLabel:"Set",setButtonType:"button-royal",todayButtonType:"button-stable",closeButtonType:"button-stable",inputDate:$scope.datepickerObject.inputDate,mondayFirst:!0,templateType:"popup",showTodayButton:"true",modalHeaderColor:"bar-positive",modalFooterColor:"bar-positive",from:new Date(2012,8,2),to:new Date(2018,8,25),callback:function(val){datePickerCallback(val)},dateFormat:"MMM - yyyy - dd",closeOnSelect:!1}}angular.module("ttmmApp.expense").controller("MakeExpenseCtrl",MakeExpenseCtrl),MakeExpenseCtrl.$inject=["$scope","$state","expenseDataApi"]}();