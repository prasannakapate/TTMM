(function() {
    'use strict';
    angular
        .module('ttmmApp', ['ionic', 'ttmmApp.core', 'ttmmApp.expense', 'ttmmApp.account'])
        //DSCacheFactory is not CacheFactory
        .run(function($ionicPlatform, CacheFactory) {
            $ionicPlatform.ready(function() {
                // Hide the accessory bar by default
                // (remove this to show the accessory bar above the keyboard for form inputs)
                if (window.cordova && window.cordova.plugins.Keyboard) {
                    cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
                }
                if (window.StatusBar) {
                    // org.apache.cordova.statusbar required
                    StatusBar.styleDefault();
                }
                //cache for the offline usage
                CacheFactory("getExpenseListCache", {
                    storageMode: "localStorage",
                    maxAge: 100000,
                    deleteOnExpire: "aggressive"
                });

                CacheFactory("loginUserCache", {
                    storageMode: "localStorage",
                    maxAge: 100000,
                    deleteOnExpire: "aggressive"
                });

                CacheFactory("sessionCache", {
                    storageMode: "localStorage",
                    maxAge: 100000,
                    deleteOnExpire: "aggressive"
                });

                CacheFactory("staticCache", {
                    storageMode: "localStorage"
                });
            });
        })
        .config(function($stateProvider, $urlRouterProvider, $ionicConfigProvider) {

            $ionicConfigProvider.views.transition('ios');
            $ionicConfigProvider.views.forwardCache(false);
            $ionicConfigProvider.navBar.alignTitle('center');

            // note that you can also chain configs
            $ionicConfigProvider.tabs.position('bottom').style('standard');

            $stateProvider
                .state('welcome', {
                    url: "/welcome",
                    templateUrl: "app/welcome/welcome.html"
                })

            .state('login', {
                    url: "/login",
                    templateUrl: "app/login/login.html"
                })
                .state('tab', {
                    url: "/tab",
                    abstract: true,
                    templateUrl: "app/layout/tabs.html"
                })
                .state('tab.makeExpense', {
                    url: '/makeExpense',
                    views: {
                        'tab-makeExpense': {
                            templateUrl: 'app/expense/make-expense/make-expense.html'
                        }
                    }
                })
                .state('tab.expenses', {
                    url: '/expenses',
                    views: {
                        'tab-expenses': {
                            templateUrl: 'app/expense/expense-list/expense-list.html'
                        }
                    }
                })
                .state('tab.account', {
                    url: '/account',
                    views: {
                        'tab-account': {
                            templateUrl: 'app/account/account.html'
                        }
                    }
                })
                .state('expense-details', {
                    url: '/expenses/expense-details/:id',
                    templateUrl: 'app/expense/expense-details/expense-details.html'
                })
                .state('newSignUp', {
                    url: '/newSignUp',
                    templateUrl: 'app/sign-up/sign-up.html'
                })
                .state('forgotPassword', {
                    url: '/forgotPassword',
                    templateUrl: 'app/forgot-password/forgot-password.html'
                })
                .state('contactUs', {
                    url: '/contactUs',
                    templateUrl: 'app/contact-us/contact-us.html'
                });
            $urlRouterProvider.otherwise('/welcome');
        });
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp.account', []);
})();
(function() {
    'use strict';

    angular
        .module('ttmmApp.core', [
            /*
             *Ionic modules*
             */
             'ionic-datepicker',
            /*
             *Angular modules
             */
            'ngSanitize', 'ngCookies', 'ngCordova', 'ngMessages',
            /*
             *3rd party modules
             */
            'angular-cache'
        ]);
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp.expense', []);
})();
(function() {
    'use strict';

    angular
        .module('ttmmApp')
        .factory('commonService', commonService);

    commonService.$inject = [];

    function commonService() {
        var service = {
            getKey: getKey
        };
        return service;

        ////////////////

        function getKey() {
            var key = {
                appid: "mF8l9ob91ObHNIgzfX8tnzD8WKcRJGyUkYxm45o4",
                restid: "l8qZLpxhTxZWZYmfJZJu3r5fvwcJcHGYTe7w6igT"
            };
             return key;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp')
        .factory('expenseDataApi', expenseDataApi);

    expenseDataApi.$inject = ['$http', '$q', '$ionicLoading', '$timeout', 'CacheFactory', 'userLoginDataApi', 'commonService'];

    function expenseDataApi($http, $q, $ionicLoading, $timeout, CacheFactory, userLoginDataApi, commonService) {

        var key = commonService.getKey();
        self.getExpenseListCache = CacheFactory.get('getExpenseListCache');

        self.getExpenseListCache.setOptions({
            onExpire: function(key, value) {
                getExpenseList()
                    .then(function() {
                        console.log("getExpenseListCache was automatically refreshed", new Date());
                    }, function() {
                        console.log("Error getting data. Putting expired item back to cache", new Date());
                        self.getExpenseListCache.put(key, value);
                    });
            },
            cacheFlushInterval: 55000,
            maxAge: 3600000,
            verifyIntegrity: true
        });

        var service = {
            getExpenseList: getExpenseList,
            makeExpense: makeExpense,
            removeExpense: removeExpense,
            editExpense: editExpense
        };
        return service;

        ////////////////



        function getExpenseList(forceRefresh) {

            if (typeof forceRefresh === 'undefined') {
                forceRefresh = false;
            }
            var deffered = $q.defer(),
                cacheKey = 'expenses',
                expenseListData = null;

            if (!forceRefresh) {
                expenseListData = self.getExpenseListCache.get(cacheKey);
            }

            if (expenseListData) {
                console.log("Found data inside the cache", expenseListData);
                deffered.resolve(expenseListData);
            } else {

                $ionicLoading.show({
                    template: '<div class="ion-loading-c"></div> Loading...'
                });

                $http.get('https://api.parse.com/1/classes/Expenses', {
                    headers: {
                        'X-Parse-Application-Id': key.appid,
                        'X-Parse-REST-API-Key': key.restid
                    }
                }).success(function(response) {
                    $timeout(function() {
                        console.log("Received getExpenseList Data via HTTP");
                        self.getExpenseListCache.put(cacheKey, response);
                        $ionicLoading.hide();
                        deffered.resolve(response);
                    }, 2000);

                }).error(function(error, status) {
                    $timeout(function() {
                        console.log("Error While making HTTP Call");
                        $ionicLoading.hide();
                        deffered.reject(error, status);
                    }, 2000);
                });
            }
            return deffered.promise;
        }

        function makeExpense(expenseData) {
            var deffered = $q.defer();
            $http.post('https://api.parse.com/1/classes/Expenses', expenseData, {
                headers: {
                    'X-Parse-Application-Id': key.appid,
                    'X-Parse-REST-API-Key': key.restid
                }
            }).success(function(response) {
                deffered.resolve(response);
                console.log("make new expense success");
            }).error(function(error, status) {
                deffered.reject(error, status);
                console.log("make new expense Error", error, " Status =", status);
            });
            return deffered.promise;
        }

        function removeExpense(id) {
            var deffered = $q.defer();
            $http.delete('https://api.parse.com/1/classes/Expenses/' + id, {
                headers: {
                    'X-Parse-Application-Id': key.appid,
                    'X-Parse-REST-API-Key': key.restid
                }
            }).success(function(response) {
                console.log("Data delete successfully");
                deffered.resolve(response);
            }).error(function(error, status) {
                console.log("Data delete error");
                deffered.reject(error, status);
            });
            return deffered.promise;
        }

        function editExpense(id, data) {
            var deffered = $q.defer();
            $http.put('https://api.parse.com/1/classes/Expenses/' + id, data, {
                headers: {
                    'X-Parse-Application-Id': key.appid,
                    'X-Parse-REST-API-Key': key.restid
                }
            }).success(function(response) {
                console.log("Data edit successfully");
                deffered.resolve(response);
            }).error(function(error, status) {
                console.log("Data edit error");
                deffered.reject(error, status);
            });
            return deffered.promise;
        }
    }
})();

(function() {
    "use strict";
    angular
        .module('ttmmApp')
        .factory('userLoginDataApi', userLoginDataApi);

    userLoginDataApi.$inject = ['$http', '$q', '$ionicLoading', '$timeout', '$ionicPopup', 'commonService'];

    function userLoginDataApi($http, $q, $ionicLoading, $timeout, $ionicPopup, commonService) {
        /*jshint validthis: true */
        var key = commonService.getKey();
        var vm = this;
        vm.userData = '';

        var LoginServices = {
            loginUser: loginUser,
            logoutUser: logoutUser,
            getCurrentUser: getCurrentUser
        };
        return LoginServices;

        function getCurrentUser() {
            var deffered = $q.defer();
            $http.get('https://api.parse.com/1/users/me', {
                    headers: {
                        'X-Parse-Application-Id': key.appid,
                        'X-Parse-REST-API-Key': key.restid,
                        'X-Parse-Session-Token': vm.userData.sessionToken
                    }
                })
                .success(function(response) {
                    //console.log("Current users details", response);
                    deffered.resolve(response);
                })
                .error(function(error, status) {
                    console.log("error getting current users details", error, status);
                    deffered.reject(error, status);
                });
            return deffered.promise;
        }

        function logoutUser() {
            var deffered = $q.defer();
            $http.post('https://api.parse.com/1/sessions/' + vm.userData.objectId, {
                    headers: {
                        'X-Parse-Application-Id': key.appid,
                        'X-Parse-REST-API-Key': key.restid,
                        'X-Parse-Session-Token': vm.userData.sessionToken
                    }
                })
                .success(function(response) {
                    console.log("Current users Successfully logout", response);
                    deffered.resolve(response);
                })
                .error(function(error, status) {
                    console.log("error while logging out for currentUser", error, status);
                    deffered.reject(error, status);
                });
            return deffered.promise;
        }

        function loginUser(username, password) {
            var deffered = $q.defer();

            $ionicLoading.show({
                template: '<div class="ion-loading-c"></div> Loading...'
            });

            $http.get('https://api.parse.com/1/login', {
                    headers: {
                        'X-Parse-Application-Id': key.appid,
                        'X-Parse-REST-API-Key': key.restid
                    },
                    params: {
                        username: username,
                        password: password
                    }
                })
                .success(function(response) {
                    $timeout(function() {
                        $ionicLoading.hide();
                        //console.log("user login Successfully", response);
                        deffered.resolve(response);
                        vm.userData = response;
                        console.log("user data ->>>>>>>>>>>>", vm.userData);
                    }, 2000);

                }).error(function(error, status) {
                    $timeout(function() {
                        console.log("Error While making HTTP Call");
                        $ionicLoading.hide();
                        deffered.reject(error, status);
                        // An alert dialog
                        $ionicPopup.alert({
                            title: 'Try again !',
                            template: 'Incorrect username or password',
                            okType: 'button-assertive'
                        });
                    }, 2000);
                });
            return deffered.promise;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp')
        .factory('sessionService', sessionService);
    sessionService.$inject = ['$log', 'CacheFactory', 'userLoginDataApi', 'commonService'];

    function sessionService($log, CacheFactory, userLoginDataApi, commonService) {
        var key = commonService.getKey();
        self.userCache = CacheFactory.get('loginUserCache');
        self.accessTokenCache = CacheFactory.get('sessionCache');

        self.userCache.setOptions({
            onExpire: function(key, value) {
                userLoginDataApi.loginUser()
                    .then(function() {
                        console.log("userLoginDataApi.loginUser was automatically refreshed", new Date());
                    }, function() {
                        console.log("Error getting data. Putting expired item back to cache", new Date());
                        self.userCache.put(key, value);
                    });
            },
            cacheFlushInterval: 55000,
            maxAge: 3600000,
            verifyIntegrity: true
        });

        self.accessTokenCache.setOptions({
            onExpire: function(key, value) {
                userLoginDataApi.loginUser()
                    .then(function() {
                        console.log("userLoginDataApi.loginUser was automatically refreshed", new Date());
                    }, function() {
                        console.log("Error getting data. Putting expired item back to cache", new Date());
                        self.accessTokenCache.put(key, value);
                    });
            },
            cacheFlushInterval: 55000,
            maxAge: 3600000,
            verifyIntegrity: true
        });

        var service = {
            getUser: getUser,
            setUser: setUser,
            getAccessToken: getAccessToken,
            destroy: destroy
        };


        return service;

        ////////////////

        function getUser() {
            return self.user;
        }

        function setUser(user) {
            self.user = user;
            self.user.put(cacheKey, user);
            return self.user;
        }

        function getAccessToken() {
            return self.accessToken;
        }

        function setAccessToken(token) {
            self.accessToken = token;
            CacheFactory.put(cacheKey, token);
            return self;
        }

        function destroy() {
            setUser(null);
            setAccessToken(null);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp')
        .factory('signUpDataApi', signUpDataApi);

    signUpDataApi.$inject = ['$http', '$q', '$ionicLoading', '$timeout', 'commonService'];

    function signUpDataApi($http, $q, $ionicLoading, $timeout, commonService) {
        var key = commonService.getKey();

        var service = {
            newUserSignUp: newUserSignUp
        };
        return service;

        ////////////////

        function newUserSignUp(newUserSignUpData) {
            var deffered = $q.defer();
            $ionicLoading.show({
                template: '<div class="ion-loading-c"></div> Loading...'
            });
            $http.post('https://api.parse.com/1/users', newUserSignUpData, {
                headers: {
                    'X-Parse-Application-Id': key.appid,
                    'X-Parse-REST-API-Key': key.restid
                }
            }).success(function(response) {
                $timeout(function() {
                    $ionicLoading.hide();
                    deffered.resolve(response);
                    console.log("signUpUserData completed successfully", response);
                }, 2000);

            }).error(function(error, status) {
                $timeout(function() {
                    $ionicLoading.hide();
                    deffered.reject(error, status);
                    console.log(JSON.stringify(error, status));
                }, 2000);

            });
            return deffered.promise;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp.account')
        .controller('AccountCtrl', AccountCtrl);

    AccountCtrl.$inject = ['userLoginDataApi'];

    function AccountCtrl(userLoginDataApi) {
        /*jshint validthis: true */
        var vm = this;
        vm.title = 'AccountCtrl';
        vm.currentUser = '';
        vm.currentUserLogout = currentUserLogout;

        activate();

        function activate() {
            userLoginDataApi.getCurrentUser().then(function(data) {
                vm.currentUser = data;
            });
        }

        function currentUserLogout() {
            console.log("currentUserLogout called");
            userLoginDataApi.logoutUser().then(function(data) {
                console.log("Logout user datails", data);
            });
        }
        /*        userLoginDataApi.getCurrentUser().then(function(data) {
                    vm.currentUser = data;
                });
        */
    }
})();

(function() {
    'use strict';
    angular
        .module("ttmmApp")
        .controller("LoginCtrl", LoginCtrl);
    LoginCtrl.$inject = ['$state', 'userLoginDataApi', '$cookieStore'];

    function LoginCtrl($state, userLoginDataApi, $cookieStore) {
        var vm = this;
        vm.userData = {};
        vm.currentUser = {};
        vm.userLogin = userLogin;
        vm.fbLogin = fbLogin;

        //Login for users
        function userLogin() {
            userLoginDataApi.
            loginUser(vm.userData.username, vm.userData.password)
                .then(function(user) {
                    $state.go('tab.makeExpense');
                    vm.currentUser = user;
                    console.log("User details", vm.currentUser);
                });
        }


        // FB Login
        function fbLogin() {
            FB.login(function(response) {
                if (response.authResponse) {
                    getUserInfo();
                } else {
                    console.log('User cancelled login or did not fully authorize.');
                }
            }, {
                scope: 'email,user_photos,user_videos'
            });

            function getUserInfo() {
                // get basic info
                FB.api('/me', function(response) {
                    console.log('Facebook Login RESPONSE: ' + angular.toJson(response));
                    // get profile picture
                    FB.api('/me/picture?type=normal', function(picResponse) {
                        console.log('Facebook Login RESPONSE: ' + picResponse.data.url);
                        response.imageUrl = picResponse.data.url;
                        // store data to DB - Call to API
                        // Todo
                        // After posting user data to server successfully store user data locally
                        var user = {};
                        user.name = response.name;
                        user.email = response.email;
                        if (response.gender) {
                            response.gender.toString().toLowerCase() === 'male' ? user.gender = 'M' : user.gender = 'F';
                        } else {
                            user.gender = '';
                        }
                        user.profilePic = picResponse.data.url;
                        $cookieStore.put('userInfo', user);
                        $state.go('tab.makeExpense');

                    });
                });
            }
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp')
        .controller('SignUpCtrl', SignUpCtrl);

    SignUpCtrl.$inject = ['$state', 'signUpDataApi'];

    function SignUpCtrl($state, signUpDataApi) {
        var vm = this;
        vm.userSignUp = userSignUp;
        vm.userData = {};

        ////////////////

        function userSignUp(userData) {
            signUpDataApi.newUserSignUp(userData).then(function() {
                console.log("New user sign up data", userData);
                $state.go('login');
            });
        }
    }
})();

(function() {
    'use strict';
    angular
        .module("ttmmApp")
        .controller("WelcomeCtrl", WelcomeCtrl);
    WelcomeCtrl.$inject = ['$state'];

    function WelcomeCtrl($state) {

    }
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp.expense')
        .controller('ExpenseDetailsCtrl', ExpenseDetailsCtrl);

    ExpenseDetailsCtrl.$inject = ['$scope', '$stateParams', '$filter', 'expenseDataApi'];

    function ExpenseDetailsCtrl($scope, $stateParams, $filter, expenseDataApi) {
        $scope.expenseMonth = $stateParams.id;
        $scope.expenseDetails = '';
        $scope.totalMonthlySum = '';
        $scope.loadList = '';

        console.log("stateParams = ", $scope.expenseMonth);

        $scope.loadList = function(forceRefresh) {
            expenseDataApi.getExpenseList(forceRefresh).then(function(data) {
                $scope.expenseDetails = _(data.results).chain()
                    .groupBy(function(item) {
                        item.expenseMonth = $filter('date')(item.expenseMonth, "MMM-yyyy");
                        return item.expenseMonth.substring(0, 8);
                    })
                    .pairs()
                    .map(function(currentItem) {
                        return _.object(_.zip(["month", "expenses"], currentItem));
                    })
                    .find({
                        'month': $scope.expenseMonth
                    })
                    .pick('expenses')
                    .value();

                $scope.totalMonthlySum = _($scope.expenseDetails.expenses).chain()
                    .sum('expenseAmount')
                    .value();
            }); //end of event call
        };
        $scope.loadList(false);
    }
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp.expense')
        .controller('ExpenseListCtrl', ExpenseListCtrl);

    ExpenseListCtrl.$inject = ['$scope', '$filter', 'expenseDataApi'];

    function ExpenseListCtrl($scope, $filter, expenseDataApi) {
        $scope.title = 'My Expenses';
        $scope.expenseGroupByMonth = '';
        $scope.loadList = '';

        $scope.loadList = function(forceRefresh) {
            //item.dateAsString = $filter('date')(item.date, "yyyy-MM-dd");  // for type="date" binding
            expenseDataApi.getExpenseList(forceRefresh).then(function(data) {
                $scope.expenseGroupByMonth = _(data.results).chain()
                    .groupBy(function(item) {
                        item.expenseMonth = $filter('date')(item.expenseMonth, "MMM-yyyy");
                        return item.expenseMonth.substring(0, 8);
                    })
                    .pairs()
                    .map(function(currentItem) {
                        return _.object(_.zip(["month", "expenseDetails"], currentItem));
                    })
                    .value();
                //console.log($scope.expenseGroupByMonth);
                //item.dateAsString = $filter('date')(item.date, "yyyy-MM-dd");
                //$scope.expenseGroupByMonth.month = $filter('date')(new Date(), 'month'); // for type="date" binding
                console.log($scope.expenseGroupByMonth);
            }).finally(function() {
                $scope.$broadcast('scroll.refreshComplete');
            });
        };
        $scope.loadList(false);
    }
})();

(function() {
    'use strict';

    angular
        .module('ttmmApp.expense')
        .controller('MakeExpenseCtrl', MakeExpenseCtrl);

    MakeExpenseCtrl.$inject = ['$scope', '$state', 'expenseDataApi', 'userLoginDataApi'];

    function MakeExpenseCtrl($scope, $state, expenseDataApi, userLoginDataApi) {
        $scope.loadList = '';
        $scope.currentUser = '';
        $scope.makeExpense = makeExpense;
        $scope.expense = {};
        $scope.datepickerObject = {};
        $scope.expenseMonth = '';
        $scope.datepickerObject.inputDate = new Date();

        $scope.datepickerObjectPopup = {
            titleLabel: 'Select Expense Date', //Optional
            todayLabel: 'Today', //Optional
            closeLabel: 'Close', //Optional
            setLabel: 'Set', //Optional
            setButtonType: 'button-royal', //Optional
            todayButtonType: 'button-stable', //Optional
            closeButtonType: 'button-stable', //Optional
            inputDate: $scope.datepickerObject.inputDate, //Optional
            mondayFirst: true, //Optional
            templateType: 'popup', //Optional
            showTodayButton: 'true', //Optional
            modalHeaderColor: 'bar-positive', //Optional
            modalFooterColor: 'bar-positive', //Optional
            from: new Date(2012, 8, 2), //Optional
            to: new Date(2018, 8, 25), //Optional
            callback: function(val) { //Mandatory
                datePickerCallback(val);
            },
            dateFormat: 'MMM - yyyy - dd', //Optional
            closeOnSelect: false, //Optional
        };

        ////////////////

        /*userLoginDataApi.getCurrentUser().then(function(data) {
            $scope.currentUser = data;
            console.log("current user details", $scope.currentUser);
            $scope.expense.userId = data.objectId;
        });*/


        function datePickerCallback(val) {
            if (typeof(val) === 'undefined') {
                console.log('No date selected');
            } else {
                $scope.datepickerObjectPopup.inputDate = val;
                $scope.expense.expenseMonth = val;
                console.log('Selected date is : ', val);
            }
        }


        function makeExpense(expense) {
            console.log("makeExpense Called", expense);
            $scope.loadList = function(forceRefresh) {
                expenseDataApi.makeExpense(expense).then(function(data) {
                    expenseDataApi.getExpenseList(forceRefresh).then(function(data) {
                        $state.go('tab.expenses');
                    });
                });
            };
            $scope.loadList(false);
        }
    }
})();
